package school;

import school.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import school.dao.MiddleDao;
import school.dao.StudentDao;
import school.dao.TeacherDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "MIDDLE".
 */
public class Middle {

    private Long id;
    private long MiddleStudentId;
    private long MiddleTeacherId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MiddleDao myDao;

    private Student student;
    private Long student__resolvedKey;

    private Teacher teacher;
    private Long teacher__resolvedKey;


    public Middle() {
    }

    public Middle(Long id) {
        this.id = id;
    }

    public Middle(Long id, long MiddleStudentId, long MiddleTeacherId) {
        this.id = id;
        this.MiddleStudentId = MiddleStudentId;
        this.MiddleTeacherId = MiddleTeacherId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMiddleDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getMiddleStudentId() {
        return MiddleStudentId;
    }

    public void setMiddleStudentId(long MiddleStudentId) {
        this.MiddleStudentId = MiddleStudentId;
    }

    public long getMiddleTeacherId() {
        return MiddleTeacherId;
    }

    public void setMiddleTeacherId(long MiddleTeacherId) {
        this.MiddleTeacherId = MiddleTeacherId;
    }

    /** To-one relationship, resolved on first access. */
    public Student getStudent() {
        long __key = this.MiddleStudentId;
        if (student__resolvedKey == null || !student__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StudentDao targetDao = daoSession.getStudentDao();
            Student studentNew = targetDao.load(__key);
            synchronized (this) {
                student = studentNew;
            	student__resolvedKey = __key;
            }
        }
        return student;
    }

    public void setStudent(Student student) {
        if (student == null) {
            throw new DaoException("To-one property 'MiddleStudentId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.student = student;
            MiddleStudentId = student.getId();
            student__resolvedKey = MiddleStudentId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Teacher getTeacher() {
        long __key = this.MiddleTeacherId;
        if (teacher__resolvedKey == null || !teacher__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TeacherDao targetDao = daoSession.getTeacherDao();
            Teacher teacherNew = targetDao.load(__key);
            synchronized (this) {
                teacher = teacherNew;
            	teacher__resolvedKey = __key;
            }
        }
        return teacher;
    }

    public void setTeacher(Teacher teacher) {
        if (teacher == null) {
            throw new DaoException("To-one property 'MiddleTeacherId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.teacher = teacher;
            MiddleTeacherId = teacher.getId();
            teacher__resolvedKey = MiddleTeacherId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
